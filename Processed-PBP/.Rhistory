a[j] = a[j] + 1
#count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
#print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
wtf = function(n)
{
results = matrix(rep(0,2), ncol = 2, nrow = n)
for(i in 1:n)
{
results[i,1] = hw(i)[1]
results[i,2] = hw(i)[2]
}
return(results)
}
wtf(100)
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
#count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
hw(10)
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
wtf = function(n)
{
results = matrix(rep(0,2), ncol = 2, nrow = n)
for(i in 1:n)
{
results[i,1] = hw(i)[1]
results[i,2] = hw(i)[2]
}
return(results)
}
#plot run time
a = wtf(100)
a[,2]
plot(seq(1,100,1), a[,2])
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x, x*log(x)/log(3))
lines(x, x*log(x)/log(2))
lines(x,exp(x))
lines(x,x^n)
lines(x,log(n))
lines(x,log(x))
lines(x,log(x))
lines(x,log(x))
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
#print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
wtf = function(n)
{
results = matrix(rep(0,2), ncol = 2, nrow = n)
for(i in 1:n)
{
results[i,1] = hw(i)[1]
results[i,2] = hw(i)[2]
}
return(results)
}
#plot run time
a = wtf(100)
a[,2]
plot(seq(1,100,1), a[,2])
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
lines(x,x^n)
lines(x,log(x))
a = wtf(100)
a[,2]
plot(seq(1,100,1), a[,2], main = 'Run time of Algorithm vs. Exponential and nlog(n)')
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
a = wtf(100)
a[,2]
plot(seq(1,100,1), a[,2], xlab = 'n', ylab = 'Num of steps', main = 'Run time of Algorithm vs. Exponential and nlog(n)')
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
hw (10)
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
hw(10)
A = [1,0,0,0;0,0,0,0]
A = [c(1,0,0,0), c(rep(0,4))]
A = matrix(c(1,0,0,0), c(rep(0,4)))
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
wtf = function(n)
{
results = matrix(rep(0,2), ncol = 2, nrow = n)
for(i in 1:n)
{
results[i,1] = hw(i)[1]
results[i,2] = hw(i)[2]
}
return(results)
}
#plot run time
a = wtf(100)
a[,2]
plot(seq(1,100,1), a[,2], xlab = 'n', ylab = 'Num of steps', main = 'Run time of Algorithm vs. Exponential and nlog(n)')
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
lines(x,x^n)
lines(x,log(x))
a = wtf(10)
a[,2]
plot(seq(1,100,1), a[,2], xlab = 'n', ylab = 'Num of steps', main = 'Run time of Algorithm vs. Exponential and nlog(n)')
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
lines(x,x^n)
lines(x,log(x))
hw = function(n)
{
a = rep(0, n)
count = 0
for(i in 1:n){
j = i
#count = count + 1
while (j <= n)
{
a[j] = a[j] + 1
count = count + 1
wtf = c(i,j,a)
j = j + i
count = count + 1
print(wtf)
#print(count)
}
}
return(c(a[i], count))
#return(count)
}
wtf = function(n)
{
results = matrix(rep(0,2), ncol = 2, nrow = n)
for(i in 1:n)
{
results[i,1] = hw(i)[1]
results[i,2] = hw(i)[2]
}
return(results)
}
#plot run time
a = wtf(10)
a[,2]
plot(seq(1,100,1), a[,2], xlab = 'n', ylab = 'Num of steps', main = 'Run time of Algorithm vs. Exponential and nlog(n)')
x = seq(1,100,1)
lines(x, x*log(x)/log(2))
lines(x,exp(x))
lines(x,x^n)
lines(x,log(x))
library(faraway)
data(amherst)
data()
data(faraway)
a = [2 3 ]
a = c(0.02,0.03,0.05,0.05,0.35,0.50)
a
a1 = c(0.04,0.05,0.08,0.12,0.41,0.3)
sum(a)
sum(a1)
.25/.4
0.5*a
g = 0.5(a+a1)
a+a1
g = 0.5*(a+a1)
g
a/2
(a/2)/g
1-(a/2)/g
5/8
a = c(0.01,0.02,0.03,0.05,0.05,0.07,0.77)
a1 = c(0.03,0.04,0.1,0.1,0.2,0.18,0.3)
sum(a)
sum(a1)
a1 = c(0.03,0.09,0.1,0.1,0.2,0.18,0.3)
sum(a1)
a/2 + a1/2
g = a/2 + a1/2
a*0.5/g
1/9
1/19
2/19
3/19
1/11
2/1
2/11
2/13
3/13
a1*0.5/g
7/25
77/.535*2
535*2
77/1070
77/107
a*0.5/g
a1*0.5/g
107-77
library(faraway)
data(teengamb)
a = teengamb
attach(a)
head(a)
x1 = sex - mean(sex)
x2 = status - mean(status)
x3 = income - mean(income)
x4= verbal - mean(verbal)
x5 = gamble - mean(gamble)
x1
lm(gamble ~ sex + status + income + verbal)
fit = lm(gamble ~ sex + status + income + verbal)
summary(fit)
cfit = lm(gamble ~ x1 + x2 + x3 + x4)
summary(cfit)
teengamb
cfit
cfit$resid
plot(cfit$resid)
abline(h = 0)
max(cfit$resid)
which(cfit$resid == max(cfit$resid))
mean(cfit$resid)
median(cfit$resid)
summary(cfit)
summary(fit)
?zapsmall
resid(cfit)
fitted(cfit)
plot(fitted(cfit))
par(2,2)
plot(fitted(cfit))
?par
mfrow = c(2,2)
plot(fitted(cfit))
cor(fitted(cfit),resid(cfit))
cor(income,resid(cfit))
cfit
fit
fit$intercept
fit$(Intercept)
fit$Intercept
fit$Coef[1]
fit$Coef
fit = lm(gamble ~ sex + status + income + verbal)
cfit = lm(gamble ~ x1 + x2 + x3 + x4)
fit$coef
fit$coef[1]
mean(sex)
cfit$coef[1] + cfit$coef[2]*(-mean(sex))
fit$coef[1] + fit$coef[2]
fit$coef[1] + fit$coef[2]*(0)
cfit$coef[1] + cfit$coef[2]*(-mean(sex))
cfit$coef[1] + cfit$coef[2]*(1-mean(sex))
fit$coef[1] + fit$coef[2]
fit$coef[1] + fit$coef[2]  #female
fit$coef[1] #male
cfit$coef[1] + cfit$coef[2]*(1-mean(sex)  #female
cfit$coef[1] + cfit$coef[2]*(-mean(sex))  #male
cfit$coef[1] + cfit$coef[2]*(1-mean(sex))  #female
cfit$coef[1] + cfit$coef[2]*(-mean(sex))  #male
cfit$coef[1] + cfit$coef[2]*(1-mean(sex)) - (cfit$coef[1] + cfit$coef[2]*(-mean(sex)) )
diff = fit$coef[1] + fit$coef[2]  - fit$coef[1] #female
diff
cfit$coef[1] + cfit$coef[2]*(1-mean(sex))  #female
cfit$coef[1] + cfit$coef[2]*(-mean(sex))  #male
cdiff = cfit$coef[1] + cfit$coef[2]*(1-mean(sex)) - (cfit$coef[1] + cfit$coef[2]*(-mean(sex)) )
cdiff
cdiff = (cfit$coef[1] + cfit$coef[2]*(-mean(sex))) -cfit$coef[1] + cfit$coef[2]*(1-mean(sex))
cdiff
cdiff = (cfit$coef[1] + cfit$coef[2]*(-mean(sex))) - (cfit$coef[1] + cfit$coef[2]*(1-mean(sex)) )
cdiff
fit = lm(gamble ~ sex + status)
summary(fit)
gamble * (sex - mean(sex))
sum(gamble * (sex - mean(sex)))
sum((sex - mean(sex))^2)
sum(gamble * (sex - mean(sex)))/sum((sex - mean(sex))^2)
summary(fit)
sum(gamble * (status - mean(status)))/sum((status - mean(status))^2)
fit = lm(gamble ~ sex + status + income + verbal)
summary(fit)
sum(gamble * (sex - mean(sex)))/sum((sex - mean(sex))^2)
sum(gamble * (status - mean(status)))/sum((status - mean(status))^2)
install.packages(combn)
mm <- combn(15, 6, function(x) matrix(x, 2, 3))
mm
mm <- combn(4, 2, function(x) matrix(x, 2, 3))
mm
x
mm <- combn(4, 2, function(x) matrix(x, 2, 4))
mm
mm <- combn(seq(1,1,0,0), 2, function(x) matrix(x, 2, 4))
seq(1,1,0,0)
seq(0,1)
rep(seq(0,1),2)
mm <- combn(rep(seq(1,0)), 2, function(x) matrix(x, 2, 4))
mm
mm <- combn(rep(seq(1,0)), 2, function(x) matrix(x, 12, 4))
mm
expand.grid(0:1, 0:1, 0:1)
n <- 4
l <- rep(list(0:1), n)
expand.grid(l)
l
?expand.grid
n <- 4
l <- rep(list(0:1), n)
X = expand.grid(l)
n <- 4X
X
X[,:]
X[:,]
X(:,)
X[1,1]
X[1,]
X[:,]
X[,]
X[,:]
X[:,]
X[1:3,]
X[which(sum(X[:,]) == 2),]
X > 2
X[,] > 2
X[1:3] > 2
X[1:4,] > 2
X[,1] > 2
X[,1:2] > 2
sum(X[,1:4]) > 2
rowSums(X)
X
X[which(rowSums(X) == 2),]
x1 = X[which(rowSums(X) == 2),]
rep(x1,2)
rbind(x1,x1)
n <- 4
l <- rep(list(0:1), n)
A = expand.grid(l)
X = A[which(rowSums(A) == 2),]
X = rbind(X,X)
X*X''
t(X)
Xt(X)
X*t(X)
dim(X)
dim(X*t(X))
X^2
X %*% X
?X
type(X)
matrix(X)
class(A)
class(X)
data.matrix(X)
class(data.matrix(X))
X = class(data.matrix(X))
X %*% X
class(X)
X = data.matrix(X)
X = A[which(rowSums(A) == 2),]
X = rbind(X,X)
X = data.matrix(X)
X %*% X
X
X*X
X %*% t(X)
t(X) %*% X
eigen(t(X) %*% X)
solve(A)
XT_X = t(X) %*% X  #X'X
solve(XT_X)
6/25
5/24
randn
rand
?rand
rnorm
rnorm(0,1)
rnorm(1,0,1)
rnorm(1,0,1)*10
?qt
qt(0.9,8)
qt(0.975,8)
qt(0.95,8)
z = 1.645
z*4
6.58/5
a = 6.58/5
20 - 1
20-a
20+a
z8 = 0.845
z8 * 4/5
z8 * 4
3.38/5
20-.676
.658*4
b = .658*4
(8*z)/b
5/2
setwd("~/Documents/Python/ESPN/Processed-PBP")
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
i = 1
pbp = read.csv(file = listcsv[i], sep = '\t')
teamname = strsplit(listcsv[i],".csv")
head(a)
head(pbp)
as.data.frame(table(pbp[which(pbp[,"turnover"]==1),"player"]))
